# -*- coding: utf-8 -*-
"""GC: Computing GC Content.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nkXuXrixLksxX2f8YcdXbryxzVHt1i4

## GC: [Computing GC Content](https://rosalind.info/problems/gc/)
"""

def find_highest_gc_content(dna_strings):
  """Solve https://rosalind.info/problems/gc/

  Given: At most 10 DNA strings in FASTA format (of length at most 1 kbp each).
  Return: The ID of the string having the highest GC-content, followed by the GC-content of that string. 
  Rosalind allows for a default error of 0.001 in all decimal answers unless otherwise stated; 
  please see the note on absolute error below.
  """

  def calculate_gc_content(dna_string):
      gc_count = dna_string.count('G') + dna_string.count('C')
      return gc_count / len(dna_string) * 100

  lines = dna_strings.strip().split('\n')

  current_label = ''
  current_string = ''
  gc_contents = {}

  for line in lines:
    if line.startswith('>'):
      if current_label != '':
        gc_contents[current_label] = calculate_gc_content(current_string)
        current_string = ''
      current_label = line.strip()[1:]
    else:
      current_string += line.strip()

  gc_contents[current_label] = calculate_gc_content(current_string)

  highest_gc_label = max(gc_contents, key=gc_contents.get)

  result = f"{highest_gc_label}\n{round(gc_contents[highest_gc_label], 6)}"
  return result

sample_data = '>Rosalind_6404\nCCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG\n>Rosalind_5959\nCCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC\n>Rosalind_0808\nCCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGGTGGAAT'
find_highest_gc_content(sample_data) == ('Rosalind_0808 60.91954')

from google.colab import files

def string_from_uploaded_file():  
  uploaded = files.upload() # https://colab.research.google.com/notebooks/io.ipynb#scrollTo=BaCkyg5CV5jF
  for bytesObject in uploaded.values(): # https://www.w3schools.com/python/ref_dictionary_values.asp
    return bytesObject.decode('utf-8') # https://pythonexamples.org/python-bytes-to-string/#3
    
input_string = string_from_uploaded_file()
output_string = find_highest_gc_content(input_string)
print(output_string)
with open('rosalind_gc_output.txt', 'w') as f:
  f.write(output_string)
files.download('rosalind_gc_output.txt') # https://colab.research.google.com/notebooks/io.ipynb#scrollTo=hauvGV4hV-Mh