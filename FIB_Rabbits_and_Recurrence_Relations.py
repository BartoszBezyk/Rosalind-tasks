# -*- coding: utf-8 -*-
"""FIB: Rabbits and Recurrence Relations

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19nkXuXrixLksxX2f8YcdXbryxzVHt1i4

## FIB: [Rabbits and Recurrence Relations](https://rosalind.info/problems/fib/)
"""

def calculate_rabbit_pairs(months: int, offspring_per_pair: int) -> int:
  
    """Solves https://rosalind.info/problems/fib/

  When finding the n
-th term of a sequence defined by a recurrence relation, we can simply use the recurrence relation to generate terms for progressively larger values of n
. This problem introduces us to the computational technique of dynamic programming, which successively builds up solutions by using the answers to smaller cases.
  """
    f = [1, 1]
    for i in range(2, months):
        # Compute the next term using the recurrence relation
        f.append(f[i-1] + offspring_per_pair * f[i-2])
    return f[months-1]

help(calculate_rabbit_pairs)

# SampleData
n = 5
k = 3

calculate_rabbit_pairs(n,k)

from google.colab import files

def string_from_uploaded_file():  
  uploaded = files.upload() # https://colab.research.google.com/notebooks/io.ipynb#scrollTo=BaCkyg5CV5jF
  for bytesObject in uploaded.values(): # https://www.w3schools.com/python/ref_dictionary_values.asp
    return bytesObject.decode('utf-8') # https://pythonexamples.org/python-bytes-to-string/#3
    
input_string = string_from_uploaded_file()
months, offspring_per_pair = map(int, input_string.split())
output_string = calculate_rabbit_pairs(months, offspring_per_pair)
print(output_string)
with open('rosalind_fib_output.txt', 'w') as f:
  f.write(str(output_string))
files.download('rosalind_fib_output.txt') # https://colab.research.google.com/notebooks/io.ipynb#scrollTo=hauvGV4hV-Mh